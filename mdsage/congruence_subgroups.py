from sage.all import prod, Integers, GammaH


def _unit_to_integer_map(ZN):
    gens = ZN.unit_gens()

    def unit_to_integer(u):
        return prod(g**e for g, e in zip(gens, u.exponents()))

    return unit_to_integer


def _unit_subgroup_generators(ZN):
    ZN_star = ZN.unit_group()
    ZN_star_to_ZN = _unit_to_integer_map(ZN)

    for H in ZN_star.subgroups():
        yield [ZN_star_to_ZN(h) for h in H.gens()]


def intermediate_modular_groups(N, projective_only=True):
    """
    Returns an iterator over all congruence subgroups G between (and including) Gamma0(N) and Gamma1(N)

    INPUT:

        - N - an integer specifying the level of the congruence subgroups
        - projective_only (optional, default=True) - a bool, which signifies to only include subgroups containing -1

    OUTPUT:

        sage: from mdsage import *
        sage: sorted(intermediate_modular_groups(41))
        [Congruence Subgroup Gamma_H(41) with H generated by [40],
         Congruence Subgroup Gamma_H(41) with H generated by [9],
         Congruence Subgroup Gamma_H(41) with H generated by [27],
         Congruence Subgroup Gamma_H(41) with H generated by [23],
         Congruence Subgroup Gamma_H(41) with H generated by [8],
         Congruence Subgroup Gamma0(41)]



    """
    for gens in _unit_subgroup_generators(Integers(N)):
        G = GammaH(N, gens)
        if not projective_only or G.projective_index() == G.index():
            yield G
